/* The following code was generated by JFlex 1.4.3 on 6/27/20 10:47 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/27/20 10:47 PM from the specification file
 * <tt>C:/Users/carlo/Documents/Teoria_Compiladores/Analizador-ProyectoGrupal/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\11\35\0\1\7\1\10\1\5\1\3\1\0\1\4\1\0"+
    "\1\6\12\1\44\0\1\2\uffa1\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\1\5\1\10\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\3\12\1\0"+
    "\3\12\1\0\3\12\1\0\3\12\1\0\2\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\12\0\24\0\36\0\24\0\24\0\24\0\24"+
    "\0\24\0\24\0\24\0\50\0\62\0\74\0\106\0\120"+
    "\0\132\0\144\0\62\0\156\0\170\0\202\0\214\0\226"+
    "\0\240\0\252\0\264\0\276\0\310\0\322\0\334\0\346"+
    "\0\360\0\372\0\u0104\0\u010e\0\u0118\0\u0122\0\u012c\0\u0136"+
    "\0\u0140\0\u014a\0\u0154\0\u015e\0\u0168\0\u0172\0\u017c\0\u0186"+
    "\0\u0190\0\u019a\0\u01a4\0\u01ae\0\u01b8\0\u01c2\0\u01cc\0\u01d6"+
    "\0\u01e0\0\u01ea\0\u01f4\0\u01fe\0\u0208\0\u0212\0\u021c\0\u0226"+
    "\0\u0230\0\u023a\0\u0244\0\u024e\0\u0258\0\u0262\0\u026c\0\u0276"+
    "\0\u0280\0\u028a\0\u0294\0\u029e\0\u02a8\0\u02b2\0\u02bc\0\u02c6"+
    "\0\u02d0\0\u02da\0\u02e4\0\u02ee\0\u02f8\0\u0302\0\u030c\0\u0316"+
    "\0\u0320\0\u032a\0\u0334\0\u033e\0\u0348\0\u0352\0\u035c\0\u0366"+
    "\0\u0370\0\u037a\0\u0384\0\u038e\0\u0398\0\u03a2\0\u03ac\0\u03b6"+
    "\0\u03c0\0\u03ca\0\u03d4\0\u03de\0\u03e8\0\u03f2\0\u03fc\0\u0406"+
    "\0\u0410\0\u041a\0\u0424\0\u042e\0\u0438\0\u0442\0\u044c\0\u0456"+
    "\0\u0460\0\u046a\0\u0474\0\u047e\0\u0488\0\u0492\0\u049c\0\u04a6"+
    "\0\u04b0\0\u04ba\0\u04c4\0\u04ce\0\u04d8\0\u04e2\0\u04ec\0\u04f6"+
    "\0\u0500\0\u050a\0\u0514\0\u051e\0\u0528\0\u0532\0\u053c\0\u0546"+
    "\0\u0550\0\u055a\0\u0564\0\u056e\0\u0578\0\u0582\0\u058c\0\u0596"+
    "\0\u05a0\0\u05aa\0\u05b4\0\u05be\0\u05c8\0\u05d2\0\u05dc\0\u05e6"+
    "\0\u05f0\0\u05fa\0\u0604\0\u060e\0\u0618\0\u0622\0\u062c\0\u0636"+
    "\0\u0640\0\u064a\0\u0654\0\u065e\0\u0668\0\u0672\0\u067c\0\u0686"+
    "\0\u0690\0\u069a\0\u06a4\0\u06ae\0\u06b8\0\u06c2\0\u06cc\0\u06d6"+
    "\0\u06e0\0\u06ea\0\u06f4\0\u06fe\0\u0708\0\u0712\0\u071c\0\u0726"+
    "\0\u0730\0\u073a\0\u0744\0\u074e\0\u0758\0\u0762\0\u076c\0\u0776"+
    "\0\u0780\0\u078a\0\u0794\0\u079e\0\u07a8\0\u07b2\0\u07bc\0\u07c6"+
    "\0\u07d0\0\u07da\0\u07e4\0\u07ee\0\u07f8\0\u0802\0\u080c\0\u0816"+
    "\0\u0820\0\u082a\0\u0834\0\u083e\0\u0848\0\u0852\0\u085c\0\u0866"+
    "\0\u0870\0\u087a\0\u0884\0\u088e\0\u0898\0\u08a2\0\u08ac\0\u08b6"+
    "\0\u08c0\0\u08ca\0\u08d4\0\u08de\0\u08e8\0\u08f2\0\u08fc\0\u0906"+
    "\0\u0910\0\u091a\0\u0924\0\u092e\0\u0938\0\u0942\0\u094c\0\u0956"+
    "\0\u0960\0\u096a\0\u0974\0\u097e\0\u0988\0\u0992\0\u099c\0\u09a6"+
    "\0\u09b0\0\u09ba\0\u09c4\0\u09ce\0\u09d8\0\u09e2\0\u09ec\0\u09f6"+
    "\0\u0a00\0\u0a0a\0\u0a14\0\u0a1e\0\u0a28\0\u0a32\0\u0a3c\0\u0a46"+
    "\0\u0a50\0\u0a5a\0\u0a64\0\u0a6e\0\u0a78\0\u0a82\0\u0a8c\0\u0a96"+
    "\0\u0aa0\0\u0aaa\0\u0ab4\0\u0abe\0\u0ac8\0\u0ad2\0\u0adc\0\u0ae6"+
    "\0\u0af0\0\u0afa\0\u0b04\0\u0b0e\0\u0b18\0\u0b22\0\u0b2c\0\u0b36"+
    "\0\u0b40\0\u0b4a\0\u0b54\0\u0b5e\0\u0b68\0\u0b72\0\u0b7c\0\u0b86"+
    "\0\u0b90\0\u0b9a\0\u0ba4\0\u0bae\0\u0bb8\0\u0bc2\0\u0bcc\0\u0bd6"+
    "\0\u0be0\0\u0bea\0\u0bf4\0\u0bfe\0\u0c08\0\u0c12\0\u0c1c\0\u0c26"+
    "\0\u0c30\0\u0c3a\0\u0c44\0\u0c4e\0\u0c58\0\u0c62\0\u0c6c\0\u0c76"+
    "\0\u0c80\0\u0c8a\0\u0c94\0\u0c9e\0\u0ca8\0\u0cb2\0\u0cbc\0\u0cc6"+
    "\0\u0cd0\0\u0cda\0\u0ce4\0\u0cee\0\u0cf8\0\u0d02\0\u0d0c\0\u0d16"+
    "\0\u0d20\0\u0d2a\0\u0d34\0\u0d3e\0\u0d48\0\u0d52\0\u0d5c\0\u0d66"+
    "\0\u0d70\0\u0d7a\0\u0d84\0\u0d8e\0\u0d98\0\u0da2\0\u0dac\0\u0db6"+
    "\0\u0dc0\0\u0dca\0\u0dd4\0\u0dde\0\u0de8\0\u0df2\0\u0dfc\0\u0e06"+
    "\0\u0e10\0\u0e1a\0\u0e24\0\u0e2e\0\u0e38\0\u0e42\0\u0e4c\0\u0e56"+
    "\0\u0e60\0\u0e6a\0\u0e74\0\u0e7e\0\u0e88\0\u0e92\0\u0e9c\0\u0ea6"+
    "\0\u0eb0\0\u0eba\0\u0ec4\0\u0ece\0\u0ed8\0\u0ee2\0\u0eec\0\u0ef6"+
    "\0\u0f00\0\u0f0a\0\u0f14\0\u0f1e\0\u0f28\0\u0f32\0\u0f3c\0\u0f46"+
    "\0\u0f50\0\u0f5a\0\u0f64\0\u0f6e\0\u0f78\0\u0f82\0\u0f8c\0\u0f96"+
    "\0\u0fa0\0\u0faa\0\u0fb4\0\u0fbe\0\u0fc8\0\u0fd2\0\u0fdc\0\u0fe6"+
    "\0\24";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\0\1\3\1\14\1\5\1\6\1\15\1\10"+
    "\1\11\1\16\1\13\14\0\1\4\11\0\1\14\5\17"+
    "\1\20\1\21\2\0\1\22\11\0\1\22\2\0\1\23"+
    "\6\0\1\24\11\0\1\24\5\17\1\25\1\26\2\0"+
    "\1\24\5\17\1\20\1\26\2\0\1\22\5\17\1\20"+
    "\1\21\2\0\1\24\5\27\1\25\1\26\2\0\1\30"+
    "\5\27\1\31\1\32\2\0\1\30\5\27\1\25\1\32"+
    "\2\0\1\30\11\0\1\30\5\33\1\31\1\32\2\0"+
    "\1\34\5\33\1\35\1\36\2\0\1\34\5\33\1\31"+
    "\1\36\2\0\1\34\11\0\1\34\5\37\1\35\1\36"+
    "\2\0\1\40\5\37\1\41\1\42\2\0\1\40\5\37"+
    "\1\35\1\42\2\0\1\40\11\0\1\40\5\43\1\41"+
    "\1\42\2\0\1\44\5\43\1\45\1\46\2\0\1\44"+
    "\5\43\1\41\1\46\2\0\1\44\11\0\1\44\5\47"+
    "\1\45\1\46\2\0\1\50\5\47\1\51\1\52\2\0"+
    "\1\50\5\47\1\45\1\52\2\0\1\50\11\0\1\50"+
    "\5\53\1\51\1\52\2\0\1\54\5\53\1\55\1\56"+
    "\2\0\1\54\5\53\1\51\1\56\2\0\1\54\11\0"+
    "\1\54\5\57\1\55\1\56\2\0\1\60\5\57\1\61"+
    "\1\62\2\0\1\60\5\57\1\55\1\62\2\0\1\60"+
    "\11\0\1\60\5\63\1\61\1\62\2\0\1\64\5\63"+
    "\1\65\1\66\2\0\1\64\5\63\1\61\1\66\2\0"+
    "\1\64\11\0\1\64\5\67\1\65\1\66\2\0\1\70"+
    "\5\67\1\71\1\72\2\0\1\70\5\67\1\65\1\72"+
    "\2\0\1\70\11\0\1\70\5\73\1\71\1\72\2\0"+
    "\1\74\5\73\1\75\1\76\2\0\1\74\5\73\1\71"+
    "\1\76\2\0\1\74\11\0\1\74\5\77\1\75\1\76"+
    "\2\0\1\100\5\77\1\101\1\102\2\0\1\100\5\77"+
    "\1\75\1\102\2\0\1\100\11\0\1\100\5\103\1\101"+
    "\1\102\2\0\1\104\5\103\1\105\1\106\2\0\1\104"+
    "\5\103\1\101\1\106\2\0\1\104\11\0\1\104\5\107"+
    "\1\105\1\106\2\0\1\110\5\107\1\111\1\112\2\0"+
    "\1\110\5\107\1\105\1\112\2\0\1\110\11\0\1\110"+
    "\5\113\1\111\1\112\2\0\1\114\5\113\1\115\1\116"+
    "\2\0\1\114\5\113\1\111\1\116\2\0\1\114\11\0"+
    "\1\114\5\117\1\115\1\116\2\0\1\120\5\117\1\121"+
    "\1\122\2\0\1\120\5\117\1\115\1\122\2\0\1\120"+
    "\11\0\1\120\5\123\1\121\1\122\2\0\1\124\5\123"+
    "\1\125\1\126\2\0\1\124\5\123\1\121\1\126\2\0"+
    "\1\124\11\0\1\124\5\127\1\125\1\126\2\0\1\130"+
    "\5\127\1\131\1\132\2\0\1\130\5\127\1\125\1\132"+
    "\2\0\1\130\11\0\1\130\5\133\1\131\1\132\2\0"+
    "\1\134\5\133\1\135\1\136\2\0\1\134\5\133\1\131"+
    "\1\136\2\0\1\134\11\0\1\134\5\137\1\135\1\136"+
    "\2\0\1\140\5\137\1\141\1\142\2\0\1\140\5\137"+
    "\1\135\1\142\2\0\1\140\11\0\1\140\5\143\1\141"+
    "\1\142\2\0\1\144\5\143\1\145\1\146\2\0\1\144"+
    "\5\143\1\141\1\146\2\0\1\144\11\0\1\144\5\147"+
    "\1\145\1\146\2\0\1\150\5\147\1\151\1\152\2\0"+
    "\1\150\5\147\1\145\1\152\2\0\1\150\11\0\1\150"+
    "\5\153\1\151\1\152\2\0\1\154\5\153\1\155\1\156"+
    "\2\0\1\154\5\153\1\151\1\156\2\0\1\154\11\0"+
    "\1\154\5\157\1\155\1\156\2\0\1\160\5\157\1\161"+
    "\1\162\2\0\1\160\5\157\1\155\1\162\2\0\1\160"+
    "\11\0\1\160\5\163\1\161\1\162\2\0\1\164\5\163"+
    "\1\165\1\166\2\0\1\164\5\163\1\161\1\166\2\0"+
    "\1\164\11\0\1\164\5\167\1\165\1\166\2\0\1\170"+
    "\5\167\1\171\1\172\2\0\1\170\5\167\1\165\1\172"+
    "\2\0\1\170\11\0\1\170\5\173\1\171\1\172\2\0"+
    "\1\174\5\173\1\175\1\176\2\0\1\174\5\173\1\171"+
    "\1\176\2\0\1\174\11\0\1\174\5\177\1\175\1\176"+
    "\2\0\1\200\5\177\1\201\1\202\2\0\1\200\5\177"+
    "\1\175\1\202\2\0\1\200\11\0\1\200\5\203\1\201"+
    "\1\202\2\0\1\204\5\203\1\205\1\206\2\0\1\204"+
    "\5\203\1\201\1\206\2\0\1\204\11\0\1\204\5\207"+
    "\1\205\1\206\2\0\1\210\5\207\1\211\1\212\2\0"+
    "\1\210\5\207\1\205\1\212\2\0\1\210\11\0\1\210"+
    "\5\213\1\211\1\212\2\0\1\214\5\213\1\215\1\216"+
    "\2\0\1\214\5\213\1\211\1\216\2\0\1\214\11\0"+
    "\1\214\5\217\1\215\1\216\2\0\1\220\5\217\1\221"+
    "\1\222\2\0\1\220\5\217\1\215\1\222\2\0\1\220"+
    "\11\0\1\220\5\223\1\221\1\222\2\0\1\224\5\223"+
    "\1\225\1\226\2\0\1\224\5\223\1\221\1\226\2\0"+
    "\1\224\11\0\1\224\5\227\1\225\1\226\2\0\1\230"+
    "\5\227\1\231\1\232\2\0\1\230\5\227\1\225\1\232"+
    "\2\0\1\230\11\0\1\230\5\233\1\231\1\232\2\0"+
    "\1\234\5\233\1\235\1\236\2\0\1\234\5\233\1\231"+
    "\1\236\2\0\1\234\11\0\1\234\5\237\1\235\1\236"+
    "\2\0\1\240\5\237\1\241\1\242\2\0\1\240\5\237"+
    "\1\235\1\242\2\0\1\240\11\0\1\240\5\243\1\241"+
    "\1\242\2\0\1\244\5\243\1\245\1\246\2\0\1\244"+
    "\5\243\1\241\1\246\2\0\1\244\11\0\1\244\5\247"+
    "\1\245\1\246\2\0\1\250\5\247\1\251\1\252\2\0"+
    "\1\250\5\247\1\245\1\252\2\0\1\250\11\0\1\250"+
    "\5\253\1\251\1\252\2\0\1\254\5\253\1\255\1\256"+
    "\2\0\1\254\5\253\1\251\1\256\2\0\1\254\11\0"+
    "\1\254\5\257\1\255\1\256\2\0\1\260\5\257\1\261"+
    "\1\262\2\0\1\260\5\257\1\255\1\262\2\0\1\260"+
    "\11\0\1\260\5\263\1\261\1\262\2\0\1\264\5\263"+
    "\1\265\1\266\2\0\1\264\5\263\1\261\1\266\2\0"+
    "\1\264\11\0\1\264\5\267\1\265\1\266\2\0\1\270"+
    "\5\267\1\271\1\272\2\0\1\270\5\267\1\265\1\272"+
    "\2\0\1\270\11\0\1\270\5\273\1\271\1\272\2\0"+
    "\1\274\5\273\1\275\1\276\2\0\1\274\5\273\1\271"+
    "\1\276\2\0\1\274\11\0\1\274\5\277\1\275\1\276"+
    "\2\0\1\300\5\277\1\301\1\302\2\0\1\300\5\277"+
    "\1\275\1\302\2\0\1\300\11\0\1\300\5\303\1\301"+
    "\1\302\2\0\1\304\5\303\1\305\1\306\2\0\1\304"+
    "\5\303\1\301\1\306\2\0\1\304\11\0\1\304\5\307"+
    "\1\305\1\306\2\0\1\310\5\307\1\311\1\312\2\0"+
    "\1\310\5\307\1\305\1\312\2\0\1\310\11\0\1\310"+
    "\5\313\1\311\1\312\2\0\1\314\5\313\1\315\1\316"+
    "\2\0\1\314\5\313\1\311\1\316\2\0\1\314\11\0"+
    "\1\314\5\317\1\315\1\316\2\0\1\320\5\317\1\321"+
    "\1\322\2\0\1\320\5\317\1\315\1\322\2\0\1\320"+
    "\11\0\1\320\5\323\1\321\1\322\2\0\1\324\5\323"+
    "\1\325\1\326\2\0\1\324\5\323\1\321\1\326\2\0"+
    "\1\324\11\0\1\324\5\327\1\325\1\326\2\0\1\330"+
    "\5\327\1\331\1\332\2\0\1\330\5\327\1\325\1\332"+
    "\2\0\1\330\11\0\1\330\5\333\1\331\1\332\2\0"+
    "\1\334\5\333\1\335\1\336\2\0\1\334\5\333\1\331"+
    "\1\336\2\0\1\334\11\0\1\334\5\337\1\335\1\336"+
    "\2\0\1\340\5\337\1\341\1\342\2\0\1\340\5\337"+
    "\1\335\1\342\2\0\1\340\11\0\1\340\5\343\1\341"+
    "\1\342\2\0\1\344\5\343\1\345\1\346\2\0\1\344"+
    "\5\343\1\341\1\346\2\0\1\344\11\0\1\344\5\347"+
    "\1\345\1\346\2\0\1\350\5\347\1\351\1\352\2\0"+
    "\1\350\5\347\1\345\1\352\2\0\1\350\11\0\1\350"+
    "\5\353\1\351\1\352\2\0\1\354\5\353\1\355\1\356"+
    "\2\0\1\354\5\353\1\351\1\356\2\0\1\354\11\0"+
    "\1\354\5\357\1\355\1\356\2\0\1\360\5\357\1\361"+
    "\1\362\2\0\1\360\5\357\1\355\1\362\2\0\1\360"+
    "\11\0\1\360\5\363\1\361\1\362\2\0\1\364\5\363"+
    "\1\365\1\366\2\0\1\364\5\363\1\361\1\366\2\0"+
    "\1\364\11\0\1\364\5\367\1\365\1\366\2\0\1\370"+
    "\5\367\1\371\1\372\2\0\1\370\5\367\1\365\1\372"+
    "\2\0\1\370\11\0\1\370\5\373\1\371\1\372\2\0"+
    "\1\374\5\373\1\375\1\376\2\0\1\374\5\373\1\371"+
    "\1\376\2\0\1\374\11\0\1\374\5\377\1\375\1\376"+
    "\2\0\1\u0100\5\377\1\u0101\1\u0102\2\0\1\u0100\5\377"+
    "\1\375\1\u0102\2\0\1\u0100\11\0\1\u0100\5\u0103\1\u0101"+
    "\1\u0102\2\0\1\u0104\5\u0103\1\u0105\1\u0106\2\0\1\u0104"+
    "\5\u0103\1\u0101\1\u0106\2\0\1\u0104\11\0\1\u0104\5\u0107"+
    "\1\u0105\1\u0106\2\0\1\u0108\5\u0107\1\u0109\1\u010a\2\0"+
    "\1\u0108\5\u0107\1\u0105\1\u010a\2\0\1\u0108\11\0\1\u0108"+
    "\5\u010b\1\u0109\1\u010a\2\0\1\u010c\5\u010b\1\u010d\1\u010e"+
    "\2\0\1\u010c\5\u010b\1\u0109\1\u010e\2\0\1\u010c\11\0"+
    "\1\u010c\5\u010f\1\u010d\1\u010e\2\0\1\u0110\5\u010f\1\u0111"+
    "\1\u0112\2\0\1\u0110\5\u010f\1\u010d\1\u0112\2\0\1\u0110"+
    "\11\0\1\u0110\5\u0113\1\u0111\1\u0112\2\0\1\u0114\5\u0113"+
    "\1\u0115\1\u0116\2\0\1\u0114\5\u0113\1\u0111\1\u0116\2\0"+
    "\1\u0114\11\0\1\u0114\5\u0117\1\u0115\1\u0116\2\0\1\u0118"+
    "\5\u0117\1\u0119\1\u011a\2\0\1\u0118\5\u0117\1\u0115\1\u011a"+
    "\2\0\1\u0118\11\0\1\u0118\5\u011b\1\u0119\1\u011a\2\0"+
    "\1\u011c\5\u011b\1\u011d\1\u011e\2\0\1\u011c\5\u011b\1\u0119"+
    "\1\u011e\2\0\1\u011c\11\0\1\u011c\5\u011f\1\u011d\1\u011e"+
    "\2\0\1\u0120\5\u011f\1\u0121\1\u0122\2\0\1\u0120\5\u011f"+
    "\1\u011d\1\u0122\2\0\1\u0120\11\0\1\u0120\5\u0123\1\u0121"+
    "\1\u0122\2\0\1\u0124\5\u0123\1\u0125\1\u0126\2\0\1\u0124"+
    "\5\u0123\1\u0121\1\u0126\2\0\1\u0124\11\0\1\u0124\5\u0127"+
    "\1\u0125\1\u0126\2\0\1\u0128\5\u0127\1\u0129\1\u012a\2\0"+
    "\1\u0128\5\u0127\1\u0125\1\u012a\2\0\1\u0128\11\0\1\u0128"+
    "\5\u012b\1\u0129\1\u012a\2\0\1\u012c\5\u012b\1\u012d\1\u012e"+
    "\2\0\1\u012c\5\u012b\1\u0129\1\u012e\2\0\1\u012c\11\0"+
    "\1\u012c\5\u012f\1\u012d\1\u012e\2\0\1\u0130\5\u012f\1\u0131"+
    "\1\u0132\2\0\1\u0130\5\u012f\1\u012d\1\u0132\2\0\1\u0130"+
    "\11\0\1\u0130\5\u0133\1\u0131\1\u0132\2\0\1\u0134\5\u0133"+
    "\1\u0135\1\u0136\2\0\1\u0134\5\u0133\1\u0131\1\u0136\2\0"+
    "\1\u0134\11\0\1\u0134\5\u0137\1\u0135\1\u0136\2\0\1\u0138"+
    "\5\u0137\1\u0139\1\u013a\2\0\1\u0138\5\u0137\1\u0135\1\u013a"+
    "\2\0\1\u0138\11\0\1\u0138\5\u013b\1\u0139\1\u013a\2\0"+
    "\1\u013c\5\u013b\1\u013d\1\u013e\2\0\1\u013c\5\u013b\1\u0139"+
    "\1\u013e\2\0\1\u013c\11\0\1\u013c\5\u013f\1\u013d\1\u013e"+
    "\2\0\1\u0140\5\u013f\1\u0141\1\u0142\2\0\1\u0140\5\u013f"+
    "\1\u013d\1\u0142\2\0\1\u0140\11\0\1\u0140\5\u0143\1\u0141"+
    "\1\u0142\2\0\1\u0144\5\u0143\1\u0145\1\u0146\2\0\1\u0144"+
    "\5\u0143\1\u0141\1\u0146\2\0\1\u0144\11\0\1\u0144\5\u0147"+
    "\1\u0145\1\u0146\2\0\1\u0148\5\u0147\1\u0149\1\u014a\2\0"+
    "\1\u0148\5\u0147\1\u0145\1\u014a\2\0\1\u0148\11\0\1\u0148"+
    "\5\u014b\1\u0149\1\u014a\2\0\1\u014c\5\u014b\1\u014d\1\u014e"+
    "\2\0\1\u014c\5\u014b\1\u0149\1\u014e\2\0\1\u014c\11\0"+
    "\1\u014c\5\u014f\1\u014d\1\u014e\2\0\1\u0150\5\u014f\1\u0151"+
    "\1\u0152\2\0\1\u0150\5\u014f\1\u014d\1\u0152\2\0\1\u0150"+
    "\11\0\1\u0150\5\u0153\1\u0151\1\u0152\2\0\1\u0154\5\u0153"+
    "\1\u0155\1\u0156\2\0\1\u0154\5\u0153\1\u0151\1\u0156\2\0"+
    "\1\u0154\11\0\1\u0154\5\u0157\1\u0155\1\u0156\2\0\1\u0158"+
    "\5\u0157\1\u0159\1\u015a\2\0\1\u0158\5\u0157\1\u0155\1\u015a"+
    "\2\0\1\u0158\11\0\1\u0158\5\u015b\1\u0159\1\u015a\2\0"+
    "\1\u015c\5\u015b\1\u015d\1\u015e\2\0\1\u015c\5\u015b\1\u0159"+
    "\1\u015e\2\0\1\u015c\11\0\1\u015c\5\u015f\1\u015d\1\u015e"+
    "\2\0\1\u0160\5\u015f\1\u0161\1\u0162\2\0\1\u0160\5\u015f"+
    "\1\u015d\1\u0162\2\0\1\u0160\11\0\1\u0160\5\u0163\1\u0161"+
    "\1\u0162\2\0\1\u0164\5\u0163\1\u0165\1\u0166\2\0\1\u0164"+
    "\5\u0163\1\u0161\1\u0166\2\0\1\u0164\11\0\1\u0164\5\u0167"+
    "\1\u0165\1\u0166\2\0\1\u0168\5\u0167\1\u0169\1\u016a\2\0"+
    "\1\u0168\5\u0167\1\u0165\1\u016a\2\0\1\u0168\11\0\1\u0168"+
    "\5\u016b\1\u0169\1\u016a\2\0\1\u016c\5\u016b\1\u016d\1\u016e"+
    "\2\0\1\u016c\5\u016b\1\u0169\1\u016e\2\0\1\u016c\11\0"+
    "\1\u016c\5\u016f\1\u016d\1\u016e\2\0\1\u0170\5\u016f\1\u0171"+
    "\1\u0172\2\0\1\u0170\5\u016f\1\u016d\1\u0172\2\0\1\u0170"+
    "\11\0\1\u0170\5\u0173\1\u0171\1\u0172\2\0\1\u0174\5\u0173"+
    "\1\u0175\1\u0176\2\0\1\u0174\5\u0173\1\u0171\1\u0176\2\0"+
    "\1\u0174\11\0\1\u0174\5\u0177\1\u0175\1\u0176\2\0\1\u0178"+
    "\5\u0177\1\u0179\1\u017a\2\0\1\u0178\5\u0177\1\u0175\1\u017a"+
    "\2\0\1\u0178\11\0\1\u0178\5\u017b\1\u0179\1\u017a\2\0"+
    "\1\u017c\5\u017b\1\u017d\1\u017e\2\0\1\u017c\5\u017b\1\u0179"+
    "\1\u017e\2\0\1\u017c\11\0\1\u017c\5\u017f\1\u017d\1\u017e"+
    "\2\0\1\u0180\5\u017f\1\u0181\1\u0182\2\0\1\u0180\5\u017f"+
    "\1\u017d\1\u0182\2\0\1\u0180\11\0\1\u0180\5\u0183\1\u0181"+
    "\1\u0182\2\0\1\u0184\5\u0183\1\u0185\1\u0186\2\0\1\u0184"+
    "\5\u0183\1\u0181\1\u0186\2\0\1\u0184\11\0\1\u0184\5\u0187"+
    "\1\u0185\1\u0186\2\0\1\u0188\5\u0187\1\u0189\1\u018a\2\0"+
    "\1\u0188\5\u0187\1\u0185\1\u018a\2\0\1\u0188\11\0\1\u0188"+
    "\5\u018b\1\u0189\1\u018a\2\0\1\u018c\5\u018b\1\u018d\1\u018e"+
    "\2\0\1\u018c\5\u018b\1\u0189\1\u018e\2\0\1\u018c\11\0"+
    "\1\u018c\5\u018f\1\u018d\1\u018e\2\0\1\u0190\5\u018f\1\u0191"+
    "\1\u0192\2\0\1\u0190\5\u018f\1\u018d\1\u0192\2\0\1\u0190"+
    "\11\0\1\u0190\5\u0193\1\u0191\1\u0192\2\0\1\u0194\5\u0193"+
    "\1\u0195\1\u0196\2\0\1\u0194\5\u0193\1\u0191\1\u0196\2\0"+
    "\1\u0194\11\0\1\u0194\5\u0197\1\u0195\1\u0196\2\0\1\u0198"+
    "\5\u0197\1\u0199\1\u019a\2\0\1\u0198\5\u0197\1\u0195\1\u019a"+
    "\2\0\1\u0198\11\0\1\u0198\5\u019b\1\u0199\1\u019a\2\0"+
    "\1\u019c\5\u019b\1\u019d\1\u019e\2\0\1\u019c\5\u019b\1\u0199"+
    "\1\u019e\2\0\1\u019c\11\0\1\u019c\5\u019f\1\u019d\1\u019e"+
    "\2\0\1\u01a0\5\u019f\1\0\1\u01a1\2\0\1\u01a0\5\u019f"+
    "\1\u019d\1\u01a1\2\0\1\u01a0\11\0\1\u01a0\6\0\1\u01a1"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\7\11\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 30) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return Abre_Parentesis;
          }
        case 11: break;
        case 1: 
          { return ERROR;
          }
        case 12: break;
        case 7: 
          { return Division;
          }
        case 13: break;
        case 4: 
          { return Suma;
          }
        case 14: break;
        case 3: 
          { return Potencia;
          }
        case 15: break;
        case 9: 
          { return Cierra_Parentesis;
          }
        case 16: break;
        case 2: 
          { lexeme=yytext(); return Digito;
          }
        case 17: break;
        case 6: 
          { return Multiplicacion;
          }
        case 18: break;
        case 10: 
          { lexeme=yytext(); return Valida;
          }
        case 19: break;
        case 5: 
          { return Resta;
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
